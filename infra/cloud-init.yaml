#cloud-config
package_update: true
package_upgrade: true

packages:
  - docker.io
  - docker-compose
  - git
  - curl
  - ufw

groups:
  - docker

users:
  - name: supabase
    groups: [docker, sudo]
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh_authorized_keys:
      - ${ssh_public_key}

write_files:
  - path: /home/supabase/.env
    content: |
      POSTGRES_PASSWORD=${postgres_password}
      JWT_SECRET=${jwt_secret}
      ANON_KEY=$(echo '{"alg":"HS256","typ":"JWT"}' | base64 -w0).$(echo '{"iss":"supabase","ref":"localhost","role":"anon","iat":1641910000,"exp":1799676400}' | base64 -w0).$(echo -n '{"alg":"HS256","typ":"JWT"}.{"iss":"supabase","ref":"localhost","role":"anon","iat":1641910000,"exp":1799676400}' | openssl dgst -sha256 -hmac '${jwt_secret}' -binary | base64 -w0 | tr -d '=')
      SERVICE_ROLE_KEY=$(echo '{"alg":"HS256","typ":"JWT"}' | base64 -w0).$(echo '{"iss":"supabase","ref":"localhost","role":"service_role","iat":1641910000,"exp":1799676400}' | base64 -w0).$(echo -n '{"alg":"HS256","typ":"JWT"}.{"iss":"supabase","ref":"localhost","role":"service_role","iat":1641910000,"exp":1799676400}' | openssl dgst -sha256 -hmac '${jwt_secret}' -binary | base64 -w0 | tr -d '=')
      DASHBOARD_USERNAME=${dashboard_user}
      DASHBOARD_PASSWORD=${dashboard_pass}
      POSTGRES_HOST=db
      POSTGRES_DB=postgres
      POSTGRES_PORT=5432
      POSTGRES_USER=postgres
    owner: supabase:supabase
    permissions: '0600'

  - path: /home/supabase/docker-compose.yml
    content: |
      version: '3.8'
      services:
        studio:
          container_name: supabase-studio
          image: supabase/studio:20231103-ce42139
          restart: unless-stopped
          ports:
            - "3000:3000/tcp"
          environment:
            STUDIO_PG_META_URL: http://meta:8080
            POSTGRES_PASSWORD: $${POSTGRES_PASSWORD}
            DEFAULT_ORGANIZATION_NAME: Default Organization
            DEFAULT_PROJECT_NAME: Default Project
            SUPABASE_URL: http://localhost:8000
            SUPABASE_PUBLIC_URL: http://localhost:8000
            SUPABASE_ANON_KEY: $${ANON_KEY}
            SUPABASE_SERVICE_KEY: $${SERVICE_ROLE_KEY}

        kong:
          container_name: supabase-kong
          image: kong:2.8.1
          restart: unless-stopped
          ports:
            - "8000:8000/tcp"
            - "8443:8443/tcp"
          environment:
            KONG_DATABASE: "off"
            KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
            KONG_DNS_ORDER: LAST,A,CNAME
            KONG_PLUGINS: request-transformer,cors,key-auth,acl
            KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
            KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
          volumes:
            - ./volumes/api/kong.yml:/var/lib/kong/kong.yml:ro

        auth:
          container_name: supabase-auth
          image: supabase/gotrue:v2.132.3
          depends_on:
            db:
              condition: service_healthy
          restart: unless-stopped
          environment:
            GOTRUE_API_HOST: 0.0.0.0
            GOTRUE_API_PORT: 9999
            API_EXTERNAL_URL: http://localhost:8000
            GOTRUE_DB_DRIVER: postgres
            GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:$${POSTGRES_PASSWORD}@db:5432/postgres
            GOTRUE_SITE_URL: http://localhost:3000
            GOTRUE_URI_ALLOW_LIST: "*"
            GOTRUE_DISABLE_SIGNUP: "false"
            GOTRUE_JWT_ADMIN_ROLES: service_role
            GOTRUE_JWT_AUD: authenticated
            GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
            GOTRUE_JWT_EXP: 3600
            GOTRUE_JWT_SECRET: $${JWT_SECRET}
            GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
            GOTRUE_MAILER_AUTOCONFIRM: "true"
            GOTRUE_SMTP_ADMIN_EMAIL: admin@localhost
            GOTRUE_SMTP_HOST: inbucket
            GOTRUE_SMTP_PORT: 2500
            GOTRUE_SMTP_USER: admin@localhost
            GOTRUE_SMTP_PASS: ""
            GOTRUE_SMTP_SENDER_NAME: ""
            GOTRUE_MAILER_URLPATHS_INVITE: "http://localhost:3000/auth/v1/verify"
            GOTRUE_MAILER_URLPATHS_CONFIRMATION: "http://localhost:3000/auth/v1/verify"
            GOTRUE_MAILER_URLPATHS_RECOVERY: "http://localhost:3000/auth/v1/verify"
            GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "http://localhost:3000/auth/v1/verify"

        rest:
          container_name: supabase-rest
          image: postgrest/postgrest:v11.2.2
          depends_on:
            db:
              condition: service_healthy
          restart: unless-stopped
          environment:
            PGRST_DB_URI: postgres://authenticator:$${POSTGRES_PASSWORD}@db:5432/postgres
            PGRST_DB_SCHEMAS: public,storage,graphql_public
            PGRST_DB_ANON_ROLE: anon
            PGRST_JWT_SECRET: $${JWT_SECRET}
            PGRST_DB_USE_LEGACY_GUCS: "false"

        realtime:
          container_name: supabase-realtime
          image: supabase/realtime:v2.25.50
          depends_on:
            db:
              condition: service_healthy
          restart: unless-stopped
          environment:
            PORT: 4000
            DB_HOST: db
            DB_PORT: 5432
            DB_USER: supabase_admin
            DB_PASSWORD: $${POSTGRES_PASSWORD}
            DB_NAME: postgres
            DB_AFTER_CONNECT_QUERY: 'SET search_path TO _realtime'
            DB_ENC_KEY: supabaserealtime
            API_JWT_SECRET: $${JWT_SECRET}
            FLY_ALLOC_ID: fly123
            FLY_APP_NAME: realtime
            SECRET_KEY_BASE: UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq
            ERL_AFLAGS: -proto_dist inet_tcp
            ENABLE_TAILSCALE: "false"
            DNS_NODES: "''"

        storage:
          container_name: supabase-storage
          image: supabase/storage-api:v0.46.4
          depends_on:
            db:
              condition: service_healthy
            rest:
              condition: service_started
          restart: unless-stopped
          environment:
            ANON_KEY: $${ANON_KEY}
            SERVICE_KEY: $${SERVICE_ROLE_KEY}
            POSTGREST_URL: http://rest:3000
            PGRST_JWT_SECRET: $${JWT_SECRET}
            DATABASE_URL: postgres://supabase_storage_admin:$${POSTGRES_PASSWORD}@db:5432/postgres
            FILE_SIZE_LIMIT: 52428800
            STORAGE_BACKEND: file
            FILE_STORAGE_BACKEND_PATH: /var/lib/storage
            TENANT_ID: stub
            REGION: stub
            GLOBAL_S3_BUCKET: stub
          volumes:
            - ./volumes/storage:/var/lib/storage:z

        meta:
          container_name: supabase-meta
          image: supabase/postgres-meta:v0.68.0
          depends_on:
            db:
              condition: service_healthy
          restart: unless-stopped
          environment:
            PG_META_PORT: 8080
            PG_META_DB_HOST: db
            PG_META_DB_PORT: 5432
            PG_META_DB_NAME: postgres
            PG_META_DB_USER: supabase_admin
            PG_META_DB_PASSWORD: $${POSTGRES_PASSWORD}

        db:
          container_name: supabase-db
          image: supabase/postgres:15.1.0.147
          restart: unless-stopped
          ports:
            - "5432:5432"
          environment:
            POSTGRES_HOST: /var/run/postgresql
            PGPORT: 5432
            POSTGRES_PORT: 5432
            PGPASSWORD: $${POSTGRES_PASSWORD}
            POSTGRES_PASSWORD: $${POSTGRES_PASSWORD}
            PGDATABASE: postgres
            POSTGRES_DB: postgres
            JWT_SECRET: $${JWT_SECRET}
            JWT_EXP: 3600
          volumes:
            - ./volumes/db/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
            - ./volumes/db/webhooks.sql:/docker-entrypoint-initdb.d/init-scripts/webhooks.sql:Z
            - ./volumes/db/roles.sql:/docker-entrypoint-initdb.d/init-scripts/roles.sql:Z
            - ./volumes/db/jwt.sql:/docker-entrypoint-initdb.d/init-scripts/jwt.sql:Z
            - ./volumes/db/logs.sql:/docker-entrypoint-initdb.d/migrations/99-logs.sql:Z
            - db-data:/var/lib/postgresql/data:Z
          healthcheck:
            test: pg_isready -U postgres -h localhost
            interval: 5s
            timeout: 5s
            retries: 10

      volumes:
        db-data:
    owner: supabase:supabase
    permissions: '0644'

runcmd:
  # Setup UFW firewall
  - ufw --force enable
  - ufw allow ssh
  - ufw allow 80
  - ufw allow 443
  - ufw allow 3000
  - ufw allow 5432
  - ufw allow 8000
  
  # Enable and start Docker
  - systemctl enable docker
  - systemctl start docker
  
  # Add supabase user to docker group
  - usermod -aG docker supabase
  
  # Clone Supabase and setup volumes
  - cd /home/supabase
  - git clone https://github.com/supabase/supabase.git
  - mkdir -p /home/supabase/volumes/api
  - mkdir -p /home/supabase/volumes/db
  - mkdir -p /home/supabase/volumes/storage
  
  # Copy necessary files from supabase repo
  - cp /home/supabase/supabase/docker/volumes/api/kong.yml /home/supabase/volumes/api/
  - cp /home/supabase/supabase/docker/volumes/db/*.sql /home/supabase/volumes/db/
  
  # Set ownership
  - chown -R supabase:supabase /home/supabase
  
  # Start Supabase
  - cd /home/supabase && sudo -u supabase docker-compose up -d

final_message: "Supabase installation completed! Access Studio at http://your-ip:3000 and API at http://your-ip:8000"
